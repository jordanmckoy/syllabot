generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Account_userId_to_User")

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Session_userId_to_User")

  @@index([userId], map: "Session_userId_fkey")
}

model User {
  id                 String               @id @default(cuid())
  name               String?
  email              String?              @unique
  emailVerified      DateTime?
  password           String?
  image              String?
  role               UserRole             @default(USER)
  accounts           Account[]
  sessions           Session[]
  UserCourseProgress UserCourseProgress[]
  Enrollment         Enrollment[]
  Course             Course[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserCourseProgress {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  unitId    String
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])
  unit      Unit     @relation(fields: [unitId], references: [id])

  @@unique([userId, courseId, unitId], name: "UserCourseProgress_userCourseUnit_unique")
}

model Course {
  id          String               @id @default(cuid())
  name        String
  description String
  image       String
  teacherId   String
  Unit        Unit[]
  progress    UserCourseProgress[]
  Enrollment  Enrollment[]
  teacher     User                 @relation(fields: [teacherId], references: [id])
}

model Unit {
  id          String                 @id @default(cuid())
  name        String
  description String
  courseId    String
  content     String
  position    Int                    @default(autoincrement())
  vector      Unsupported("vector")?
  course      Course                 @relation(fields: [courseId], references: [id])
  progress    UserCourseProgress[] // Add this field to track user progress in the unit
}

model Enrollment {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId], name: "Enrollment_userCourse_unique")
}

enum UserRole {
  ADMIN
  TEACHER
  USER
}
