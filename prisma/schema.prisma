generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Account_userId_to_User")

    @@unique([provider, providerAccountId])
    @@index([userId], map: "Account_userId_fkey")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Session_userId_to_User")

    @@index([userId], map: "Session_userId_fkey")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    password      String?
    image         String?
    role          UserRole  @default(USER)
    accounts      Account[]
    sessions      Session[]
    // ChatHistory   ChatHistory[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Course {
    id          String @id @default(cuid())
    name        String
    description String
    image       String
    Unit        Unit[]
    // ChatHistory ChatHistory[]
}

model Unit {
    id          String                 @id @default(cuid())
    name        String
    description String
    content     String
    vector      Unsupported("vector")?
    courseId    String
    position    Int                    @default(autoincrement())
    course      Course                 @relation(fields: [courseId], references: [id])
    // ChatHistory ChatHistory[]
}

// model ChatHistory {
//     id        String   @id @default(cuid())
//     userId    String
//     courseId  String
//     unitId    String
//     message   String
//     createdAt DateTime
//     user      User     @relation(fields: [userId], references: [id])
//     course    Course   @relation(fields: [courseId], references: [id])
//     unit      Unit     @relation(fields: [unitId], references: [id])
// }

enum UserRole {
    ADMIN
    TEACHER
    USER
}
